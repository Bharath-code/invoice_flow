---
import '../styles/global.css';
import VercelAnalytics from '../components/VercelAnalytics.astro';

export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  image?: string;
  url?: string;
  type?: string;
}

const { 
  title, 
  description = "InvoiceFlow streamlines your invoicing process with automated workflows, real-time tracking, and seamless integrations. Join thousands of businesses optimizing their billing operations.",
  keywords = "invoice software, billing automation, invoice tracking, business invoicing, automated billing, invoice management, financial workflow",
  image = "/og-image.jpg",
  url = Astro.url.href,
  type = "website"
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const siteName = "InvoiceFlow";
const author = "InvoiceFlow Team";


---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={author} />
    <meta name="robots" content="index, follow" />
    <meta name="language" content="English" />
    <meta name="revisit-after" content="7 days" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/svg+xml" sizes="32x32" href="/favicon-32x32.svg" />
    <link rel="icon" type="image/svg+xml" sizes="16x16" href="/favicon-16x16.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.svg" />
    <link rel="manifest" href="/site.webmanifest" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content="en_US" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />
    <meta property="twitter:creator" content="@invoiceflow" />
    <meta property="twitter:site" content="@invoiceflow" />
    
    <!-- Performance Optimization -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="preconnect" href="https://api.supabase.co" />
    <link rel="dns-prefetch" href="https://cdn.jsdelivr.net" />
    
    <!-- Critical Resource Hints for Performance -->
    <link rel="prefetch" href="/api/waitlist-count" />
    <link rel="modulepreload" href="/src/components/WaitlistForm.svelte" />
    
    <!-- Optimize for mobile networks -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    
    <!-- Performance hints -->
    <meta name="dns-prefetch" content="//fonts.googleapis.com">
    <meta name="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <meta name="http-equiv" content="x-dns-prefetch-control" content="on">
    
    <!-- Network optimization -->
    <meta name="save-data" content="on">
    <meta name="referrer" content="strict-origin-when-cross-origin">
    
    <!-- Structured Data -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "InvoiceFlow",
        "url": "https://invoiceflow.com",
        "logo": "https://invoiceflow.com/logo.png",
        "description": "Professional invoicing software that helps freelancers and small businesses get paid faster with automated reminders and one-click payments.",
        "foundingDate": "2024",
        "sameAs": [
          "https://twitter.com/invoiceflow",
          "https://linkedin.com/company/invoiceflow"
        ],
        "contactPoint": {
          "@type": "ContactPoint",
          "contactType": "customer service",
          "email": "support@invoiceflow.com"
        }
      }
    </script>
    
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "InvoiceFlow",
        "url": "https://invoiceflow.com",
        "description": "Professional invoicing made simple. Get paid faster with automated reminders and one-click payments.",
        "potentialAction": {
          "@type": "SearchAction",
          "target": "https://invoiceflow.com/search?q={search_term_string}",
          "query-input": "required name=search_term_string"
        }
      }
    </script>
    
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "SoftwareApplication",
        "name": "InvoiceFlow",
        "description": "Professional invoicing software that helps freelancers and small businesses get paid faster with automated reminders and one-click payments.",
        "url": "https://invoiceflow.com",
        "applicationCategory": "BusinessApplication",
        "operatingSystem": "Web Browser",
        "offers": {
          "@type": "Offer",
          "price": "0",
          "priceCurrency": "USD",
          "description": "Free tier available"
        },
        "aggregateRating": {
          "@type": "AggregateRating",
          "ratingValue": "4.8",
          "ratingCount": "150"
        }
      }
    </script>
    
    <!-- Font imports moved to separate link tags to avoid PostCSS warnings -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cal+Sans:wght@400;600;700&display=swap" />
  </head>
  <body>
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Critical styles to prevent layout shift */
      .hero-section {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      /* Prevent layout shift for images */
      img {
        height: auto;
        max-width: 100%;
      }
      
      /* Loading state to prevent CLS */
      .loading {
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      
      .loaded {
        opacity: 1;
      }
      
      /* Optimize font loading */
      body {
        font-display: swap;
      }
    </style>
    
    <slot />
    
    <!-- Web Vitals Monitoring -->
     
     
     <!-- Service Worker Registration -->
     <script>
       // Register service worker for advanced caching
       if ('serviceWorker' in navigator) {
         window.addEventListener('load', async () => {
           try {
             const registration = await navigator.serviceWorker.register('/sw.js');
             console.log('Service Worker registered successfully:', registration.scope);
             
             // Listen for updates
             registration.addEventListener('updatefound', () => {
               const newWorker = registration.installing;
               if (newWorker) {
                 newWorker.addEventListener('statechange', () => {
                   if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                     // New content available, notify user
                     console.log('New content available, please refresh.');
                   }
                 });
               }
             });
           } catch (error) {
             console.error('Service Worker registration failed:', error);
           }
         });
         
         // Send performance metrics to service worker
         navigator.serviceWorker.ready.then(registration => {
           // Listen for web vitals and send to SW
           window.addEventListener('webVitalsMetric', (event) => {
             if (registration.active) {
               registration.active.postMessage({
                 type: 'PERFORMANCE_METRICS',
                 metrics: event.detail
               });
             }
           });
         });
       }
     </script>
     
     <!-- Vercel Analytics Integration -->
     <VercelAnalytics />
   </body>
 </html>

<style>
  html {
    font-family: var(--font-body);
  }
</style>